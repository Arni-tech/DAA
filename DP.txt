LCS


int lcsTab(string s1, string s2, int m, int n)
{
    m = s1.length(), n = s2.length();
    int dp[m + 1][n + 1];

    for (int i = 0; i <= m; i++)
        dp[i][0] = 0;

    for (int j = 0; j <= n; j++)
        dp[0][j] = 0;

    for (int i = 1; i <= m; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            if (s1[i - 1] == s2[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
        }
    }
    int index = dp[m][n];
    char lcs[index + 1];
    lcs[index] = '\0';
    int i = m, j = n;
    while (i > 0 && j > 0) // this is left traversal
    {
        if (s1[i - 1] == s2[j - 1])
        {
            lcs[index - 1] = s1[i - 1];
            i--;
            j--; //diagonal traversal when characters are same
            index--; 
        }
        else if(dp[i-1][j]>dp[i][j-1])
        {
            i--; //if upper char is bigger travel to the upper row
        }
        else
        {
            j--;
        }
    }
    cout<<"Lcs for left traversal: "<<lcs<<" ";
    cout<<"\n";
    i=m, j=n, index=dp[m][n];
    while(i>0 && j>0){
        if(s1[i-1]==s2[j-1])
        {
            lcs[index-1] = s1[i-1];
            i--;
            j--;
            index--;
        }
        else if(dp[i-1][j]<dp[i][j-1])
        {
            j--;
        }
        else
        {
            i--;
        }
    }
    cout<<"Lcs for upward traversal: "<<lcs<<" ";
    cout<<"\n";

    return dp[m][n];
}

*-------------------------------------------------------------------------------------------------------------------------------------*


Fractional knapsack


int knapsackDP(int W, int wt[], int val[], int n)
{
    int dp[n + 1][W + 1]; 
  
   for(int i=0; i<=W; i++)
   {
       dp[0][i] = 0;
   }
   
   for(int i=0; i<=n; i++)
   {
       dp[i][0] = 0;
   }
    
    for (int i = 1; i <= n; i++) {  
        for (int j = 1; j <= W; j++) { 
           if (wt[i - 1] > j) 
                dp[i][j] = dp[i-1][j];
            else
                dp[i][j] = max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);  
        } 
    } 
  
    return dp[n][W]; 
}

*-----------------------------------------------------------------------------------------------------------------------------------------*

Matrix Mul:

int mChain(int p[], int n) 
{ 
  
    int dp[n][n];
    for (int i=0; i<n-1; i++)
       dp[i][i+1] = 0;
       
    for (int gap = 2; gap < n; gap++)
    {
        for (int i=0; i+gap < n; i++)
        {
            int j = i + gap;
            dp[i][j] = INT_MAX;
            for (int k=i+1; k<j; k++)
            {
               dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + p[i]*p[k]*p[j]);
            }
        }     
    }
    
    return dp[0][n-1];
}
*--------------------------------------------------------------------------------------------------------------------------------------------*


