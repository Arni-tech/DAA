Euler Graph and Ham:

#include <bits/stdc++.h>
using namespace std;

int vertexConnections[10][10];

void display(int v)
{
    for (int i = 0; i < v; i++)
    {
        for (int j = 0; j < v; j++)
        {
            cout << vertexConnections[i][j] << " ";
        }
        cout << "\n";
    }
}

void edge(int i, int j)
{
    vertexConnections[i][j] = 1;
    vertexConnections[j][i] = 1;
}

bool isEuler(int v)
{
    int sum = 0, even = 0, odd = 0, count=0;
    for (int i = 1; i <= v; i++)
    {
        sum=0;
        for (int j = 1; j <= v; j++)
        {
            sum += vertexConnections[i][j];
        }
        if(sum>=v/2){
            count++;
        }
        if (sum % 2 != 0)
        {
            odd++;
        }
        if (odd > 2)
        {
            cout << "Not Euler\n";
            return false;
        }
    }
    if(count==v){
        cout<<"Yes it is hamiltonian\n";
    }
    else{
        cout<<"No it isnt Hamiltonian\n";
    }
    if (odd == 2)
    {
        cout << "Semi_Euler\n";
        return false;
    }
    cout<<"Euler\n";
    return true;
}

int main()
{
    int vertices;
    cout<<"Enter no of vertices: ";
    cin>>vertices;
    int noOfEdges;
    cout<<"Enter no of edges: ";
    cin>>noOfEdges;
    for(int i=1; i<=noOfEdges; i++){
        int x, y;
        cin>>x>>y;
        edge(x, y);
    }

    display(vertices);
    cout << "\n";
    cout << isEuler(vertices);

    return 0;
}

*-----------------------------------------------------------------------------------------------------------------------------------------*

Topological sort:

#include<bits/stdc++.h> 
using namespace std; 

void DFS(vector<int> adj[], int u,stack<int> &st, bool visited[]) 
{ 	
    visited[u]=true;
    
    for(int v:adj[u]){
        if(visited[v]==false)
            DFS(adj,v,st,visited);
    }
    st.push(u);
}


void topologicalSort(vector<int> adj[], int V) 
{ 
    bool visited[V]; 
	for(int i = 0;i<V; i++) 
		visited[i] = false;
	stack<int> st;
    
    for(int u=0;u<V;u++){
        if(visited[u]==false){
            DFS(adj,u,st,visited);
        }
    }
    
    while(st.empty()==false){
        int u=st.top();
        st.pop();
        cout<<u<<" ";
    }
   
}

void addEdge(vector<int> adj[], int u, int v){
    adj[u].push_back(v);
}

int main() 
{ 
	int V=5;
	vector<int> adj[V];
	addEdge(adj,0, 1); 
    addEdge(adj,1, 3); 
    addEdge(adj,2, 3); 
    addEdge(adj,3, 4); 
    addEdge(adj,2, 4);  
  
    cout << "Following is a Topological Sort of\n"; 
    topologicalSort(adj,V);

	return 0; 
}

*---------------------------------------------------------------------------------------------------------------------------------------*



}}
