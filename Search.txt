Binary Search:

int bSearchR(int arr[], int low, int high, int x)
{
    if (low > high)
        return -1;

    int mid = (low + high) / 2;

    if (arr[mid] == x)
        return mid;

    else if (arr[mid] > x)
        return bSearchR(arr, low, mid - 1, x);

    else
        return bSearchR(arr, mid + 1, high, x);
}

*--------------------------------------------------------------------------------------------------------*


Merge sort:

void merge(int arr[], int l, int m, int h)
{

    int n1 = m - l + 1, n2 = h - m;

    int left[n1], right[n2];

    for (int i = 0; i < n1; i++)
        left[i] = arr[i + l];


    for (int j = 0; j < n2; j++)
        right[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;

    while (i < n1 && j < n2)
    {
        if (left[i] <= right[j])
            arr[k++] = left[i++];
        else
            arr[k++] = right[j++];
    }
    while (i < n1)
        arr[k++] = left[i++];

    while (j < n2)
        arr[k++] = right[j++];
}

void mergeSort(int arr[], int l, int r)
{
    if (r > l)
    {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
*---------------------------------------------------------------------------------------------------------------------------*

Quick Sort:

#include<iostream>
using namespace std;

int partiton(int arr[],int start,int end){
    int piv=arr[start];
    int ctr=0;
    for(int i=start+1;i<=end;i++){
        if(arr[i]<=piv){
            ctr++;
     }
    }

int pivIndex=start+ctr;
swap(arr[pivIndex],arr[start]);

int i=start;int j=end;
while(i<pivIndex && j>pivIndex){
    while(arr[i]<=piv){
        i++;
    }
    while(arr[j]>piv){
        j--;
    }
    if(i<pivIndex && j>pivIndex){
        swap(arr[i++],arr[j--]);
     }
    }
return pivIndex;
}
void quicksort(int arr[],int start,int end){
if(start>=end)
    return;
    int par= partiton(arr,start,end) ;
    quicksort(arr,start,par-1);
    quicksort(arr,par+1,end);
}

void printArray(int arr[], int size) {
  for (int i = 0; i < size; i++)
    cout << arr[i] << " ";
  cout << endl;
  }


int main(){
     int n;
    cout<<"Enter the number of elements:\t";
    cin>>n;
    int array[n];
    int i;
    for (i= 0;i<n;i++)
    {
        cout<<"Enter element no. "<<i<<":\t";
        cin>>array[i];
    }

    quicksort(array,0,n-1);
    printArray(array,n);
    return 0;}
*--------------------------------------------------------------------------------------------*

}